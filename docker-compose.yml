services:
  # Traefik API Gateway (replaces Traefik)
  traefik:
    image: traefik:v3.0
    container_name: bw-traefik
    restart: unless-stopped
    ports:
      - "8000:8000"    # HTTP entrypoint - same as Traefik
    volumes:
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./traefik/dynamic-config.yml:/etc/traefik/dynamic/config.yml:ro
    networks:
      - bw-network
    depends_on:
      - auth-service
      - post-service
      - dufs-service
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Authentication Service
  auth-service:
    build:
      context: ./auth
      dockerfile: Dockerfile
    container_name: bw-auth-service
    restart: unless-stopped
    env_file:
      - ./auth/.env.docker
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - bw-network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:9001/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Post Service
  post-service:
    build:
      context: ./post
      dockerfile: Dockerfile
    container_name: bw-post-service
    restart: unless-stopped
    env_file:
      - ./post/.env.docker
    depends_on:
      auth-service:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - bw-network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:9002/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: bw-postgres
    restart: unless-stopped
    ports:
      - "5435:5432"
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: master123
      POSTGRES_DB: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - bw-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: bw-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - bw-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
  dufs-service:
    image: sigoden/dufs:latest
    container_name: bw-dufs-service
    restart: unless-stopped
    # Lệnh này yêu cầu dufs phục vụ thư mục /data bên trong container
    # và cho phép mọi hành động (upload, delete) từ mạng nội bộ.
    # Traefik sẽ là người gác cổng, nên dufs không cần tự xác thực.
    command: ["/data", "-p", "5000", "--allow-all"]
    volumes:
      - ./managed_files:/data  # Ánh xạ thư mục local vào container
    networks:
      - bw-network
    # Chỉ expose port cho mạng nội bộ, không mở ra ngoài
    expose:
      - "5000"
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:5000/__dufs__/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # k6 Load Testing Service
  k6-tests:
    build:
      context: ./k6-tests
      dockerfile: Dockerfile
    container_name: bw-k6-tests-prod
    environment:
      MODE: prod
    networks:
      - bw-network
    depends_on:
      - traefik
      - auth-service
      - post-service
    profiles:
      - test

networks:
  bw-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
