// Centralized Prisma Schema for all services
// This is the source of truth for database migrations
// Using PostgreSQL Schemas for service isolation

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["auth_schema", "post_schema"]
}

// ============================================
// AUTH SERVICE MODELS (auth_schema)
// ============================================

model User {
  id          String    @id @default(uuid()) @map("id")
  email       String    @unique @map("email")
  password    String?   @map("password")
  firstName   String?   @map("first_name")
  lastName    String?   @map("last_name")
  avatar      String?   @map("avatar")
  isVerified  Boolean   @default(false) @map("is_verified")
  phoneNumber String?   @map("phone_number")
  role        Role
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  @@map("users")
  @@schema("auth_schema")
}

enum Role {
  ADMIN @map("ADMIN")
  USER  @map("USER")

  @@schema("auth_schema")
}

model ThirdPartyIntegration {
  id             String    @id @default(uuid()) @map("id")
  projectId      String    @unique @map("project_id")
  firebaseConfig Json?     @map("firebase_config")
  privateKey     String?   @map("private_key") @db.Text
  clientEmail    String?   @map("client_email")
  isActive       Boolean   @default(true) @map("is_active")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  deletedAt      DateTime? @map("deleted_at")

  @@map("third_party_integrations")
  @@schema("auth_schema")
}

// ============================================
// POST SERVICE MODELS (post_schema)
// ============================================

model Post {
  id        String    @id @default(uuid())
  title     String
  content   String
  images    String[]
  createdBy String    @map("created_by") @db.Uuid
  updatedBy String?   @map("updated_by") @db.Uuid
  deletedBy String?   @map("deleted_by") @db.Uuid
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  isDeleted Boolean   @default(false) @map("is_deleted")

  @@map("posts")
  @@schema("post_schema")
}

