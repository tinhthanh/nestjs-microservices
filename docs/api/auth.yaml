openapi: 3.0.0
info:
  title: Auth Service API
  description: Dịch vụ quản lý xác thực, người dùng và phân quyền.
  version: "1.0.0"
servers:
  - url: http://localhost:8000/auth
    description: Local Development Server (via Kong Gateway)

tags:
  - name: Auth
    description: Các API liên quan đến xác thực (Login, Signup, Refresh Token)
  - name: User
    description: Các API quản lý thông tin người dùng (Profile)
  - name: Admin
    description: Các API dành cho quản trị viên (Quản lý Users)

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # ========== DTOs for Request Bodies ==========
    AuthLoginDto:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          format: password
          example: StrongPass123!
    
    AuthSignupDto:
      type: object
      required: [email, password, firstName, lastName]
      properties:
        email:
          type: string
          format: email
          example: newuser@example.com
        password:
          type: string
          format: password
          example: StrongPass123!
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
          
    UserUpdateDto:
      type: object
      properties:
        firstName:
          type: string
          example: Johnny
        lastName:
          type: string
          example: Smith
        phoneNumber:
          type: string
          example: "+1234567890"
        avatar:
          type: string
          format: uri
          example: "https://example.com/avatar.png"

    # ========== DTOs for Responses ==========
    UserResponseDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        avatar:
          type: string
          format: uri
          nullable: true
        isVerified:
          type: boolean
        phoneNumber:
          type: string
          nullable: true
        role:
          type: string
          enum: [ADMIN, USER]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    
    AuthTokensDto:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
          
    AuthResponseDto:
      allOf:
        - $ref: '#/components/schemas/AuthTokensDto'
        - type: object
          properties:
            user:
              $ref: '#/components/schemas/UserResponseDto'

    # ========== Generic API Response Wrappers ==========
    ApiResponse_AuthResponse:
      type: object
      properties:
        statusCode: { type: integer, example: 201 }
        timestamp: { type: string, format: date-time }
        message: { type: string }
        data:
          $ref: '#/components/schemas/AuthResponseDto'
          
    ApiResponse_AuthTokens:
      type: object
      properties:
        statusCode: { type: integer, example: 200 }
        timestamp: { type: string, format: date-time }
        message: { type: string }
        data:
          $ref: '#/components/schemas/AuthTokensDto'

    ApiResponse_UserResponse:
      type: object
      properties:
        statusCode: { type: integer, example: 200 }
        timestamp: { type: string, format: date-time }
        message: { type: string }
        data:
          $ref: '#/components/schemas/UserResponseDto'
          
    ApiResponse_PaginatedUsers:
      type: object
      properties:
        statusCode: { type: integer, example: 200 }
        timestamp: { type: string, format: date-time }
        message: { type: string }
        data:
          type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/UserResponseDto'
            meta:
              type: object
              properties:
                page: { type: integer }
                limit: { type: integer }
                total: { type: integer }
                totalPages: { type: integer }
    
    ApiResponse_Success:
      type: object
      properties:
        statusCode: { type: integer, example: 200 }
        timestamp: { type: string, format: date-time }
        message: { type: string }
        data: { nullable: true }

paths:
  /v1/auth/signup:
    post:
      tags: [Auth]
      summary: Đăng ký tài khoản người dùng mới
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthSignupDto'
      responses:
        '201':
          description: Đăng ký thành công, trả về tokens và thông tin user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse_AuthResponse'
        '409':
          description: Email đã tồn tại

  /v1/auth/login:
    post:
      tags: [Auth]
      summary: Đăng nhập
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthLoginDto'
      responses:
        '201':
          description: Đăng nhập thành công, trả về tokens và thông tin user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse_AuthResponse'
        '404':
          description: Người dùng không tồn tại hoặc sai mật khẩu

  /v1/auth/refresh:
    get:
      tags: [Auth]
      summary: Làm mới Access Token
      description: Sử dụng Refresh Token để lấy Access Token và Refresh Token mới.
      security:
        - bearerAuth: [] # Ghi chú: Cần truyền Refresh Token ở đây
      responses:
        '200':
          description: Làm mới token thành công
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse_AuthTokens'
        '401':
          description: Refresh Token không hợp lệ hoặc đã hết hạn

  /v1/user/profile:
    get:
      tags: [User]
      summary: Lấy thông tin cá nhân
      security:
        - bearerAuth: [] # Cần Access Token
      responses:
        '200':
          description: Lấy thông tin thành công
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse_UserResponse'
        '401':
          description: Unauthorized
          
    put:
      tags: [User]
      summary: Cập nhật thông tin cá nhân
      security:
        - bearerAuth: [] # Cần Access Token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateDto'
      responses:
        '200':
          description: Cập nhật thành công
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse_UserResponse'
        '401':
          description: Unauthorized

  /v1/admin/user:
    get:
      tags: [Admin]
      summary: Lấy danh sách người dùng (Admin)
      security:
        - bearerAuth: [] # Cần Access Token của Admin
      parameters:
        - in: query
          name: page
          schema: { type: integer, default: 1 }
        - in: query
          name: limit
          schema: { type: integer, default: 10 }
        - in: query
          name: search
          schema: { type: string }
        - in: query
          name: role
          schema: { type: string, enum: [ADMIN, USER] }
      responses:
        '200':
          description: Lấy danh sách thành công
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse_PaginatedUsers'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden (Không có quyền Admin)

  /v1/admin/user/{id}:
    delete:
      tags: [Admin]
      summary: Xóa một người dùng (Admin)
      security:
        - bearerAuth: [] # Cần Access Token của Admin
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Xóa thành công
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse_Success'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
